// =========================================
// src/controllers/auth.controller.ts
// =========================================

import {
  Body,
  Controller,
  Post,
  HttpCode,
  HttpStatus,
  UseInterceptors,
  UploadedFile,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { diskStorage } from 'multer';
import { extname } from 'path';
import { AuthService } from '../services/auth.service';
import { RegisterDto } from '../dtos/register.dto';
import { LoginDto } from '../dtos/login.dto';

@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  // ========================================
  // üîπ ƒêƒÇNG K√ù NG∆Ø·ªúI D√ôNG (C√ì T√ôY CH·ªåN UPLOAD ·∫¢NH)
  // ========================================
  @Post('register')
  @HttpCode(HttpStatus.CREATED)
  @UseInterceptors(
    FileInterceptor('avatar', {
      storage: diskStorage({
        destination: './uploads/avatars', // üìÅ N∆°i l∆∞u ·∫£nh
        filename: (req, file, callback) => {
          const uniqueSuffix =
            Date.now() + '-' + Math.round(Math.random() * 1e9);
          const ext = extname(file.originalname);
          callback(null, `avatar-${uniqueSuffix}${ext}`);
        },
      }),
      limits: { fileSize: 5 * 1024 * 1024 }, // ‚úÖ Gi·ªõi h·∫°n 5MB
      fileFilter: (req, file, callback) => {
        // ‚úÖ Ch·∫•p nh·∫≠n t·∫•t c·∫£ c√°c ƒë·ªãnh d·∫°ng ·∫£nh (image/*)
        if (!file.mimetype.startsWith('image/')) {
          return callback(
            new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh h·ª£p l·ªá (jpg, png, webp, svg, heic,...)'),
            false,
          );
        }
        callback(null, true);
      },
    }),
  )
  async register(
    @UploadedFile() file: Express.Multer.File,
    @Body() body: RegisterDto,
  ) {
    const avatarPath = file
      ? file.path
      : 'uploads/avatars/default.png'; // üñº ·∫¢nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng upload

    return this.authService.register(
      body.email,
      body.password,
      body.name,
      body.phone,
      avatarPath, // ‚úÖ Truy·ªÅn ƒë∆∞·ªùng d·∫´n ·∫£nh v√†o service
    );
  }

  // ========================================
  // üîπ ƒêƒÇNG NH·∫¨P (TR·∫¢ V·ªÄ TH√îNG TIN USER + AVATAR)
  // ========================================
  @Post('login')
  @HttpCode(HttpStatus.OK)
  async login(@Body() body: LoginDto) {
    return this.authService.login(body.email, body.password);
  }

  // ========================================
  // üîπ QU√äN M·∫¨T KH·∫®U
  // ========================================
  @Post('forgot-password')
  @HttpCode(HttpStatus.OK)
  async forgotPassword(@Body('email') email: string) {
    return this.authService.forgotPassword(email);
  }

  // ========================================
  // üîπ ƒê·ªîI M·∫¨T KH·∫®U
  // ========================================
  @Post('change-password')
  @HttpCode(HttpStatus.OK)
  async changePassword(
    @Body('uid') uid: string,
    @Body('newPassword') newPassword: string,
  ) {
    return this.authService.changePassword(uid, newPassword);
  }

  // ========================================
  // üîπ RESET PASSWORD B·∫∞NG EMAIL
  // ========================================
  @Post('reset-password')
  @HttpCode(HttpStatus.OK)
  async resetPassword(
    @Body('email') email: string,
    @Body('newPassword') newPassword: string,
  ) {
    return this.authService.resetPassword(email, newPassword);
  }
}
