// =========================================
// Prisma Schema cho h·ªá th·ªëng ƒë·∫∑t v√© xe kh√°ch
// Database: PostgreSQL
// =========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// MODELS
//

model User {
  id        Int      @id @default(autoincrement())
  uid       String   @unique                  // UID t·ª´ Firebase
  name      String
  email     String   @unique
  phone     String?
  isActive  Boolean  @default(true)
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roleId])
}

model Role {
  id    Int      @id @default(autoincrement())
  name  RoleName @unique
  users User[]
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String    @unique                 // T√™n nh√† xe
  phoneNumber String?                           // SƒêT li√™n h·ªá
  image       String?                           // ·∫¢nh logo ho·∫∑c banner (c√≥ th·ªÉ null)
  address     String?                           // ƒê·ªãa ch·ªâ nh√† xe
  buses       Bus[]                             // Danh s√°ch xe thu·ªôc nh√† xe
  routes      Route[]                           // üîπ Danh s√°ch tuy·∫øn nh√† xe ph·ª•c v·ª•
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model Bus {
  id           Int        @id @default(autoincrement())
  name         String                              // T√™n xe
  licensePlate String     @unique                   // Bi·ªÉn s·ªë
  seatCount    Int                                  // S·ªë gh·∫ø
  type         BusType                              // Lo·∫°i xe
  brand        Brand      @relation(fields: [brandId], references: [id])
  brandId      Int
  schedules    Schedule[]                           // C√°c chuy·∫øn ch·∫°y c·ªßa xe
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([type])
  @@index([brandId])
}

model Route {
  id                 Int        @id @default(autoincrement())
  startPoint         String                              // N∆°i kh·ªüi h√†nh
  endPoint           String                              // N∆°i ƒë·∫øn
  averageDurationMin Int                                 // Th·ªùi l∆∞·ª£ng trung b√¨nh (ph√∫t)
  lowestPrice        Float                               // Gi√° v√© th·∫•p nh·∫•t
  distanceKm         Float?                              // Qu√£ng ƒë∆∞·ªùng (km)
  image              String?                             // H√¨nh minh h·ªça tuy·∫øn ƒë∆∞·ªùng ho·∫∑c b·∫øn xe
  brand              Brand?      @relation(fields: [brandId], references: [id])
  brandId            Int?                                // Nh√† xe ch√≠nh ph·ª•c v·ª• tuy·∫øn
  schedules          Schedule[]                          // C√°c chuy·∫øn ch·∫°y c·ª• th·ªÉ
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@index([startPoint])
  @@index([endPoint])
}

model Schedule {
  id          Int            @id @default(autoincrement())
  bus         Bus            @relation(fields: [busId], references: [id])
  busId       Int
  route       Route          @relation(fields: [routeId], references: [id])
  routeId     Int
  departureAt DateTime                                // Th·ªùi gian kh·ªüi h√†nh
  arrivalAt   DateTime                                // Th·ªùi gian ƒë·∫øn
  status      ScheduleStatus @default(UPCOMING)        // Tr·∫°ng th√°i chuy·∫øn
  tickets     Ticket[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([busId])
  @@index([routeId])
  @@index([status])
}

model Ticket {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  schedule      Schedule       @relation(fields: [scheduleId], references: [id])
  scheduleId    Int
  seatNumber    Int                                     // S·ªë gh·∫ø ƒë√£ ƒë·∫∑t
  price         Float                                   // Gi√° v√©
  status        TicketStatus   @default(BOOKED)         // Tr·∫°ng th√°i v√©
  paymentMethod PaymentMethod?                          // Ph∆∞∆°ng th·ª©c thanh to√°n
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([userId])
  @@index([scheduleId])
  @@index([status])
}

//
// ENUMS
//

enum RoleName {
  ADMIN
  PASSENGER
}

enum BusType {
  MINIVAN_16
  COACH_30
  COACH_45
  LIMOUSINE
}

enum ScheduleStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  BOOKED
  PAID
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  MOMO
  ZALOPAY
}
