generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  uid       String   @unique
  name      String
  email     String   @unique
  phone     String?
  dob       DateTime? @default(dbgenerated("'1970-01-01'::date"))
  gender    String?   @default("OTHER")
  avatar    String?
  isActive  Boolean   @default(true)
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  tickets   Ticket[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([roleId])
}

model Role {
  id    Int       @id @default(autoincrement())
  name  RoleName  @unique
  users User[]
}

model Brand {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  phoneNumber      String?
  image            String?
  address          String?
  dailyTicketLimit Int      @default(100)
  buses            Bus[]
  routes           Route[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([name])
}

model Bus {
  id           Int          @id @default(autoincrement())
  name         String
  licensePlate String       @unique
  seatCount    Int
  category     BusCategory
  seatType     SeatType
  brand        Brand        @relation(fields: [brandId], references: [id])
  brandId      Int
  seats        Seat[]
  schedules    Schedule[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([category])
  @@index([seatType])
  @@index([brandId])
}

model Seat {
  id          Int      @id @default(autoincrement())
  seatNumber  Int
  code        String   @unique
  isAvailable Boolean  @default(true)
  bus         Bus      @relation(fields: [busId], references: [id])
  busId       Int
  tickets     Ticket[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([busId])
}

model Route {
  id                Int       @id @default(autoincrement())
  startPoint        String
  endPoint          String
  averageDurationMin Int
  lowestPrice       Float
  distanceKm        Float?
  brand             Brand?    @relation(fields: [brandId], references: [id])
  brandId           Int?
  schedules         Schedule[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([startPoint])
  @@index([endPoint])
}

model Schedule {
  id          Int            @id @default(autoincrement())
  bus         Bus            @relation(fields: [busId], references: [id])
  busId       Int
  route       Route          @relation(fields: [routeId], references: [id])
  routeId     Int
  departureAt DateTime
  arrivalAt   DateTime
  status      ScheduleStatus @default(UPCOMING)
  tickets     Ticket[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([busId])
  @@index([routeId])
  @@index([status])
}

model Ticket {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  schedule      Schedule       @relation(fields: [scheduleId], references: [id])
  scheduleId    Int
  seat          Seat           @relation(fields: [seatId], references: [id])
  seatId        Int
  price         Float
  status        TicketStatus   @default(BOOKED)
  paymentMethod PaymentMethod?
  
  // CHỈ @relation – KHÔNG ĐỂ fields/references
  payment       PaymentHistory? @relation
  paymentId     Int?           @unique

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([userId])
  @@index([scheduleId])
  @@index([status])
}

model PaymentHistory {
  id            Int      @id @default(autoincrement())
  
  // CHỈ ĐỂ fields + references Ở BÊN NÀY
  ticket        Ticket   @relation(fields: [ticketId], references: [id])
  ticketId      Int      @unique

  method        PaymentMethod
  amount        Float
  transactionId String?
  status        String
  qrCode        String?
  paidAt        DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum RoleName {
  ADMIN
  PASSENGER
}

enum BusCategory {
  MINIVAN
  COACH
  LIMOUSINE
  SLEEPER
  VIP
}

enum SeatType {
  SEAT
  BERTH
}

enum ScheduleStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  BOOKED
  PAID
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  MOMO
  ZALOPAY
}